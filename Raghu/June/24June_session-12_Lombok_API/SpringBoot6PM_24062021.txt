                Date :24-Jun-21
                Spring Boot 6PM
                  Mr. RAGHU
        ------------------------------------------------

1. @NoArgsConstructor : It provides default constrcutor to your java class
2. @AllArgsConstructor:- This is used to generate all params Constructor,
          It will generate default/zero param constrcutor,
         if class has zero/no variables.

3. @RequiredArgsConstructor : This is used to generate selected variables
      as param. Constructor. But select variables using annotation: @NonNull
       It  is applied but no variable has @NonNull, then it will generate 
            default/zero param constructor

========================================================================
Q) can we override a method in sub class,
   if method is final/static/private ?
A) No. Method must be non-static, non-final and non-private


Q) What is the common super class for every Java class?
A) java.lang.Object (C)


*) toString() method defined in java.lang.Object(C)
*) toString() logic is
    Fully Qualified ClassName + @ Symbols + HashCode in Hexa Decimal Format

*) toString() is non-static, non-final and non-private, we can override.
   If we override then our toString is executed.
*) on using println() method , it is calling toString, if we try to
   print any reference variable.

--Test code--
package in.nareshit.raghu.bean;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
public class Employee {

    private Integer empId;
    private String empName;
    
}
--Main class--
package in.nareshit.raghu.bean;

public class TestMainDummy {

    public static void main(String[] args) {
        Employee emp = new Employee(101, "AA");
        System.out.println(emp.getClass().getName());//find full class name
        System.out.println("@");
        int hs = emp.hashCode();
        //decimal value to other formats
        //System.out.println(Integer.toBinaryString(hs));
        //System.out.println(Integer.toOctalString(hs));
        System.out.println(Integer.toHexString(hs));
        
        
        System.out.println(emp);
    }
}
====================================================================
*) @ToString : This annotation is used to override toString() method in your class.

@ToString
public class Employee {

    private Integer empId;
    private String empName;
    
}
Generated code looks like:
    public String toString() {
        return "Employee (eid=" + eid + ", ename=" + ename + ")";
     }


====================================================================
*) If you want to auto-detect your variables as keys in proeprties file
   add this below in pom.xml (press ctrl+space in properties file)
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-configuration-processor</artifactId>
    <optional>true</optional>
</dependency>

@Setter : It will generate set method for a variable

public void set<VariableName>(<DataType> <variableName> ) {
  this.<variableName> = <variableName>;
}

@Getter : It will generate get method for a variable

public <DataType> get<VariableName>() {
  return <variableName>;
}

----ex---------------------------------------------
  private Integer eid;

 public void setEid(Integer eid) {
    this.eid = eid;
 }

 public Integer getEid() {
    return eid;
 }

=======(full code)============================================
#1 Create Spring Starter Project
Name : SpringBoot2LombokTest
Dep  : Lombok, Configuration Processor


#2 Bean class
package in.nareshit.raghu.bean;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@NoArgsConstructor
@AllArgsConstructor
@ToString
@Setter
@Getter
@Component
@ConfigurationProperties(prefix = "my.app")
public class Employee {

    private Integer eid;
    private String ename;
    private Double esal;
}

#3 application.properties
my.app.eid=10
my.app.ename=ABC
my.app.esal=200.0

#4. Modified main class
package in.nareshit.raghu;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBoot2LombokTestApplication {

    public static void main(String[] args) {
        ApplicationContext ac = SpringApplication.run(SpringBoot2LombokTestApplication.class, args);
        Object ob = ac.getBean("employee");
        System.out.println(ob);//toString
    }

}
====================================================================
Q) What is the diff b/w equals() and == operator?
A) Both equals() and == behaves same, compare object references,
   until we override equals() method in your class

Q) Why HashCode? how will it be  generated?

Q) Why do we need to override equals with hashCode method?

Q) What are native method ? where logic exist for them?

Q) What is the diff b/w abstract and native method?

Q) Can two object have same hashCode? 
  What is Identiti HashCode , sys generated HashCode?  
