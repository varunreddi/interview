				Date : 14-12-2021
				 Spring Boot 6PM
				  Mr. RAGHU
	--------------------------------------------------------------------
Link to Join Demo Session:-
8PM 16th Dec-2021
https://nareshit.zoom.us/meeting/register/tJ0rdOmoqD0vE9eap-NY6LVLOreshJhYLDYu


			Mini Project - Spring Cloud Design

1. Eureka Server
2. Microservice 
3. Config Server
4. Admin Server (Actuator)
5. Gateway App
6. *ELK

*) Circuit Breaker Design :- Hystrix/Turbine (Removed)
*) Old Api Gateway :- Zuul (Removed) replaced with Gateway.
===================================================================
1. Eureka Server
Name : EurekaServerEx
Dep  : Eureka Server

*) application.properties
server.port=8761

eureka.client.fetch-registry=false
eureka.client.register-with-eureka=false

*) At main class: @EnableEurekaServer
==================================================
2. Product Application

mysql> create database nitdb;
http://192.168.0.6:8081/actuator/health
http://192.168.0.6:8081/actuator/beans

Name : ProductService
Dep  : Web, Lombok, Data Jpa, MySQL, Eureka Discovery Client, Actuator

*) application.properties
server.port=8081

spring.application.name=PRODUCT-SERVICE

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/nitdb
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update

management.endpoints.web.exposure.include=*

eureka.client.service-url.defaultZone=http://localhost:8761/eureka
--------------------------------------------------------------------

*) Entity
package in.nareshit.raghu.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="prodtab")
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY) 
	@Column(name="pid")
	private Long prodId;
	
	@Column(name="pcode")
	private String prodCode;
	
	@Column(name="pcost")
	private Double prodCost;
	
	@Column(name="pven")
	private String prodVen;
	
	@Column(name="pdisc")
	private Double prodDisc;
	
	@Column(name="pgst")
	private Double prodGet;
	
}

*) Repository
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.entity.Product;

public interface ProductRepository extends JpaRepository<Product,Long> {

}

*) Custom Exception
package in.nareshit.raghu.exception;

public class ProductNotFoundException extends RuntimeException {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	public ProductNotFoundException() {
		super();
	}

	public ProductNotFoundException(String message) {
		super(message);
	}
	
}

*) Service class
package in.nareshit.raghu.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.nareshit.raghu.entity.Product;
import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.repo.ProductRepository;

@Service
public class ProductService {

	@Autowired
	private ProductRepository repo;
	
	public Long saveProduct(Product p) {
		return repo.save(p).getProdId();
	}
	
	public Product getOneProduct(Long id) {
		return repo.findById(id)
				.orElseThrow(
						()->new ProductNotFoundException("Not Exist")
						);
	}
	
	public List<Product> fetchAllProducts() {
		return repo.findAll();
	}
	
	public void removeProduct(Long id) {
		repo.delete(getOneProduct(id));
	}
	
}

*) RestController
package in.nareshit.raghu.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.entity.Product;
import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.service.ProductService;

@RestController
@RequestMapping("/api/product")
public class ProductRestController {

	@Autowired
	private ProductService service;
	
	@PostMapping("/create")
	public ResponseEntity<String> createProduct(
			@RequestBody Product product
			) 
	{
		Long id = service.saveProduct(product);
		return ResponseEntity.ok("Product created => " + id);
	}
	
	@GetMapping("/find/{id}")
	public ResponseEntity<?> getOneProduct(
			@PathVariable Long id
			) 
	{
		ResponseEntity<?> resp = null;
		try {
			Product p = service.getOneProduct(id);
			resp = new ResponseEntity<Product>(p,HttpStatus.OK);
		} catch (ProductNotFoundException  e) {
			e.printStackTrace();
			resp = new ResponseEntity<String>(
					e.getMessage(),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return resp;
	}
	
	@GetMapping("/all")
	public ResponseEntity<List<Product>> findAllProducts() 
	{
		return ResponseEntity.ok(service.fetchAllProducts());
	}
	
	@DeleteMapping("/remove/{id}")
	public ResponseEntity<String> removeProduct(
			@PathVariable Long id
			) 
	{
		ResponseEntity<String> resp = null;
		try {
			service.removeProduct(id);
			resp = new ResponseEntity<String>(
					"Product Removed " +id ,
					HttpStatus.OK);
		} catch (ProductNotFoundException  e) {
			e.printStackTrace();
			resp = new ResponseEntity<String>(
					e.getMessage(),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return resp;
	}
	
}

---TEST USING POSTMAN SCREENS--------------------

3. Config Server

a. Github account project creation
uri = https://github.com/sample2025nit/my-config-nit.git
un = sample2025nit
pwd = Test2025nit!
default label = main


Name : ConfigServerEx
Dep  : Config Server

*) At main class: @EnableConfigServer
*) application.properties
server.port=8888

spring.cloud.config.server.git.uri=https://github.com/sample2025nit/test-nit-app.git
spring.cloud.config.server.git.username=sample2025nit
spring.cloud.config.server.git.password=Test2025nit!
spring.cloud.config.server.git.default-label=main

*) At MS# Product App Level : Config Client in pom.xml
*) At MS# Product App Level : application.properties
  spring.config.import=optional:configserver:http://localhost:8888
==========================================================================
4. Admin Server (Actuator)

Name : AdminServerEx
Dep  : Admin Server 
> At main class: @EnableAdminServer
> application.properties
server.port=9999

*) At MS# Product App Level : Admin Client in pom.xml
*) At MS# Product App Level : application.properties
spring.boot.admin.client.url=http://localhost:9999


--Run App in order--------------
1. Eureka Server
2. Config Server
3. Admin server
4. Product Service
Enter URL:
http://localhost:8761/
http://localhost:9999/applications
*) Test operations using POSTMAN
=======================================================================
Gateway App

Name : GatewayServerEx
Dep  : Gateway , Discovery Client

*) Gateway Config
package in.nareshit.raghu.config;

import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class GatewayConfig {

	@Bean
	public RouteLocator configureRoutes(RouteLocatorBuilder builder) {
		return builder.routes()
				.route(
						"productId", 
						r->r.path("/api/product/**")
						.uri("lb://PRODUCT-SERVICE")
						).build();
	}
}

*) application.properties
server.port=80
spring.application.name=GATEWAY-SERVICE
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
-------------------------------------------------------------------
*) After running all apps:
http://192.168.0.6/api/product/all