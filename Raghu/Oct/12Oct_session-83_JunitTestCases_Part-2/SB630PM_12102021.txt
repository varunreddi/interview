				Date : 12-10-2021
				Spring Boot 6:30PM
				  Mr. RAGHU
		-----------------------------------------------------

*) Steps for Test method in JUnit and Mock using Boot:-
a. Create one Request using URL, Http Method, Headers and Body.
b. Execute Request and return Result (MvcResult=Request + Response)
c. Read Response data from Result object.
d. Assert Data using JUnit test methods.


http://localhost:8080/h2-console/

--application-test.properties---
server.port=8080

spring.h2.console.enabled=true
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.username=root
#spring.datasource.password=root

spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#logging.file.name=D:/mylogs/sample.log
logging.file.name=../mylogs/sample.log
logging.file.max-size=10KB
logging.file.max-history=7
logging.file.clean-history-on-start=false
#logging.pattern.file=%d [%t] %C- %M ----------- %m%n
logging.level.in.nareshit.raghu=DEBUG
#logging.level.org.springframework=ERROR
#logging.level.org.hibernate=ERROR

============================================
pom.xml
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

---Full test class-----------------
package in.nareshit.raghu.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.entity.Product;
import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.service.IProductService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import springfox.documentation.annotations.ApiIgnore;

@RestController
@RequestMapping("/rest/product")
@Api(description = "PRODUCT REST SERVICE")
@Slf4j
public class ProductRestController {
	
	//private static final Logger log = LoggerFactory.getLogger(ProductRestController.class);
	
	@Autowired
	private IProductService service;

	//1. create product
	@PostMapping("/save")
	public ResponseEntity<String> createProduct(
			@RequestBody Product product) 
	{
		log.info("Entered into operation");
		ResponseEntity<String> resp = null;
		try {
			Integer id = service.saveProduct(product);
			resp = new ResponseEntity<String>(
					"Product '"+id+"' created",
					HttpStatus.CREATED);
			log.debug("Product is created: {}",id);
		} catch (Exception e) {
			log.error("Unable to perform save operation:{}",e.getMessage());
			e.printStackTrace();
		}
		log.info("About to return response");
		return resp;
	}
	
	//2. view all products
	@GetMapping("/all")
	@ApiOperation("FETCHIG ALL PRODUCTS DATA!!")
	public ResponseEntity<List<Product>> getAllProducts() {
		ResponseEntity<List<Product>> resp = null;
		List<Product> list = service.findAllProducts();
		resp = new ResponseEntity<List<Product>>(list, HttpStatus.OK);
		return resp;
	}
	
	//3. find one product by id
	@GetMapping("/find/{id}")
	@ApiOperation("FETCH DATA BY ID")
	public ResponseEntity<?> fetchOneProduct(
			@PathVariable Integer id
			)
	{
		log.info("Entered into fetch data of product");
		ResponseEntity<?> resp = null;
		try {
			Product p = service.findOneProduct(id);
			resp = new ResponseEntity<Product>(p, HttpStatus.OK);
			log.debug("Data found is : {}",p);
		} catch (ProductNotFoundException e) {
			log.error("Unable to process request: {}",e.getMessage());
			e.printStackTrace();
			throw e;
		}
		log.info("About to return response of Product fetch!");
		return resp;
	}
	
	//4. delete one product
	@DeleteMapping("/remove/{id}")
	@ApiIgnore
	public ResponseEntity<String> removeOneProduct(
			@PathVariable Integer id
			) 
	{
		ResponseEntity<String> resp = null;
		try {

			service.deleteProduct(id);
			resp = new ResponseEntity<String>(id+"-deleted!", HttpStatus.OK);
			
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			throw e;
			/*resp = new ResponseEntity<String>(
					e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);*/
		}
		return resp;
	}
	
	//5. update one product
	@PutMapping("/modify")
	public ResponseEntity<String> updateProduct(
			@RequestBody Product product) 
	{
		ResponseEntity<String> resp = null;
		try {
			service.updateProduct(product);
			resp = new ResponseEntity<String>(
					"Product updated!", 
					//HttpStatus.RESET_CONTENT (205)
					HttpStatus.OK
					);
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			throw e;
		}
		return resp;
	}
	
	//6. partial update (product code)
	@PatchMapping("/update/{id}/{code}")
	public ResponseEntity<String> updateProdCode(
			@PathVariable Integer id,
			@PathVariable String code
			) 
	{
		ResponseEntity<String> resp = null;
		try {
			service.modifyCodeById(code, id);
			resp = new ResponseEntity<String>(
					"Product Code Updated",
					//HttpStatus.PARTIAL_CONTENT (206)
					HttpStatus.OK
					);
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			throw e;
		}
		return resp;
	}
	
}
==================================================================