				Date : 28-10-2021
				Spring Boot 6:30PM
				   Mr. RAGHU
	--------------------------------------------------------------
		            Open Feign (Feign client)

*) It is a abstract client. It generates code required to make communication.
*) It internally used LoadBalancerClient code only.
*) We need to define one interface with abstract method(+rules).
*) Open Feign uses Dynamic Proxy Patterns and generates code at runtime.
  We need to pass inputs : serviceId, Path , Http Method, ReturnType, Params..etc

Dynamic Proxy class:
A dynamic proxy class is a class that implements a list of interfaces specified at runtime
https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html

Reference Core java - Spring Boot based Example:-
https://github.com/javabyraghu/DynamicProxyExample

*) At Consumer application 
S#1 Add one Dependency : Open Feign [spring-cloud-starter-openfeign]

S#2 At main class level : @EnableFeignClients

S#3 At Consumer Interface level: @FeignClient("serviceId")

---------------------------------------------------------------------
*) We can define interface with any name and even abstract method too.  
   But abstract method must have matching/same
      ReturnType, Parameter, Path and HttpMethod with producer method.
---------------------------------------------------------------------

==Code==============(OF-Open Feign)===================================
1. Eureka Server
Name : SpringCloudOFEurekaServer
Dep  : Eureka Server

> At main class : @EnableEurekaServer
---application.properties----
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
________________________________________________________________
2. Author Service

Name : SpringCloudOFAuthorService
Dep  : Eureka Discovery Client, Web

> At main class: @EnableEurekaClient
---application.properties--------
server.port=9900

spring.application.name=AUTHOR-SERVICE
eureka.instance.instance-id=${spring.application.name}:${random.value}
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
---------------------------------------

>> RestController
package in.nareshit.raghu.rest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/author")
public class AuthorRestController {

	@Value("${server.port}")
	private String port;
	
	@GetMapping("/show")
	public ResponseEntity<String> showAuthData() {
		return new ResponseEntity<String>("FROM AUTHOR--"+port,HttpStatus.OK);
	}
	
}


________________________________________________________________
3. Book Service

Name : SpringCloudOFBookService
Dep  : Eureka Discovery Client, Web, Open Feign

> At main class: @EnableEurekaClient, @EnableFeignClients

---application.properties----------
server.port=8686
spring.application.name=BOOK-SERVICE
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
---------------------------------

>> Consumer Interface
package in.nareshit.raghu.consumer;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;

@FeignClient("AUTHOR-SERVICE")
public interface AuthorRestConsumer {

	@GetMapping("/author/show")
	public ResponseEntity<String> showAuthData();
}

>> REstController
package in.nareshit.raghu.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.consumer.AuthorRestConsumer;

@RestController
@RequestMapping("/book")
public class BookRestController {

	@Autowired
	private AuthorRestConsumer consumer;
	
	@GetMapping("/info")
	public ResponseEntity<String> showBookData() {
		System.out.println(consumer.getClass().getName());
		return new ResponseEntity<String>(
				"FROM BOOK==>" + consumer.showAuthData().getBody(),
				HttpStatus.OK);
	}
	
}

===========Execution============================
1. Run Eureka Server
2. Run Author Service (3 times with diff port numbers)
3. Run Book Service
4. Goto Eureka [http://localhost:8761/]
5. Click on Book Link : http://192.168.0.9:8686/actuator/info
6. Modify URL as:
  http://192.168.0.9:8686/book/info

*) Generated Proxy class example name : com.sun.proxy.$Proxy71
