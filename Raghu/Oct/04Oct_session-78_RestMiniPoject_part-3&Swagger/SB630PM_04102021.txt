				Date : 04-10-2021
				Spring Boot 6:30PM
				  Mr. RAGHU
	----------------------------------------------------------------
			PATCH UPDATE - Partial Update

Q) What is the difference between PUT and PATCH?
A)
   PUT    - Update an existed resource (Full update)
   PATCH  - Update Partially an existed Resource.

Q) Cant we use cross combinations in coding? Like
POST- for update
PUT - for delete
DELETE - for get?

A) Yes, we can use it and code it. 100% works.
 But these Http Methods are contract between producer and Consumer.
 So, here for all developers HTTP Standards given.
 ie Producer never expose code, they provides URL and HTTP method.

-----------------------------------------------------------------
*) Note:
=> @Query -- SELECT Operation

=> @Modifying + @Query -- Non-SELECT operation (update or delete)
  and also we need to apply @Transactional at service.



==code===================
S#1 Repository interface
	[add one custom non-select operation ]

@Modifying
@Query("UPDATE Product SET prodCode=:code WHERE prodId=:id")
void modifyCodeById(String code,Integer id);

S#2 Service interface
void modifyCodeById(String code,Integer id);

S#3 SeviceImpl
	@Transactional
	public void modifyCodeById(String code, Integer id) {
		if(!repo.existsById(id))
			throw new ProductNotFoundException(id+ " - not found");
		repo.modifyCodeById(code, id);
	}


S#4 RestController
	@PatchMapping("/update/{id}/{code}")
	public ResponseEntity<String> updateProdCode(
			@PathVariable Integer id,
			@PathVariable String code
			) 
	{
		ResponseEntity<String> resp = null;
		try {
			service.modifyCodeById(code, id);
			resp = new ResponseEntity<String>(
					"Product Code Updated",
					//HttpStatus.PARTIAL_CONTENT (206)
					HttpStatus.OK
					);
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			throw e;
		}
		return resp;
	}
===================================================================
			   Swagger - UI

*) Swagger client/Swagger UI is a Open Source HTTP Client.

*) This can be configured in application ontime that will scan
  all our controller classes and creates one dynamic UI
  which makes HTTP Request to test those method with input
  and display Final Response.

*) No need to enter URLs manually, no need to provide HTTP methods manually.
   Model class views given. Easy to execute, hide using Profiles.

*) Swagger Configuration output is Docket(Documented Configured Output)

*) We must provide input of common package name for all RestController
   to scan them using

     .apis(basePackage(__________))

  with condition having one common path 

     .paths(regex("_____")

     dot(.) - character  Star(*) - zero to many
     /rest.* => starts with /rest and may contain zero to many other chars


S#1 in pom.xml
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>

S#2 Swagger Config
package in.nareshit.raghu.config;

import static springfox.documentation.builders.PathSelectors.regex;
import static springfox.documentation.builders.RequestHandlerSelectors.basePackage;

import java.util.Collections;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
	
	@Bean
	public Docket createDocument() {
		return new Docket(DocumentationType.SWAGGER_2)
				.select()
				.apis(basePackage("in.nareshit.raghu.rest"))
				.paths(regex("/rest.*"))
				.build()
				.apiInfo(apiInfo());
	}

	private ApiInfo apiInfo() {
		return new ApiInfo(
				"MY PRODUCT APP", 
				"SAMPLE", 
				"3.3GA", 
				"https://nareshit.in/", 
				new Contact("AA", "http://aa.com", "aa@gmail.com"), 
				"NIT Ltd", "https://nareshit.in/", Collections.EMPTY_LIST
				);
	}
}

S#3 Anntations at Controller methods
	@ApiOperation("FETCHIG ALL PRODUCTS DATA!!")

	@ApiIgnore- To avoid a method expose to Swagger UI

At Class level:
	@Api(description = "PRODUCT REST SERVICE")

--coding steps----------------------------------
1) create Empty Document Screen (Docket)
2) select RestControllers(apis) using one common[base] package
3) Check with condition one common path (regex)
4) create Dynamic UI (build)
5) API Info is called as MetaData (just description/optional)

---------------------------------------------
package com;
class A{
  static void m1(){}
  static void m2(){}
  static void m3(){}
}
------------
//import com.A;
import static com.A.m1;
class B{
 void test(){
    //A.m1();
    m1();
 } 
}