			Title : Spring Boot AOP
			        Session-2
				Mr. RAGHU
				(NareshIT)
		https://www.facebook.com/groups/thejavatemple
			javabyraghu@gmail.com
    ------------------------------------------------------------
    Session-1 : https://www.youtube.com/watch?v=x2f4NzNCkCI


Aspect (class)
Advice (method)
 Before    advice()-->b.method()

 After    b.method()-->success/fail--> advice()

 AfterReturning    b.method()-->only on success--> advice()
 AfterThrowing     b.method()-->only on fail--> advice()

  Around -- advice-part1() --->b.method()--->advice-part-2()


Pointcut - expression-selecting b.method

===================================================================

Before  execution of saveEmployee() method plz call beginTx() method



-----------code--------------------------------------------
Step#1 Spring Starter Project
 Name: SpringBoot2AopEx

pom.xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-aop</artifactId>
</dependency>

S#2 At starter class: @EnableAspectJAutoProxy

S#3 Business class

package in.nareshit.raghu.dao;

import org.springframework.stereotype.Component;

@Component
public class EmployeeDao  {

	public String saveEmployee() {
		System.out.println("FROM SAVE EMPLOYEE");
		/*if(new Random().nextInt(15)<=10) {
			throw new RuntimeException("DUMMY EXCEPTION");
		}*/
		return "HELLO";
	}
}

S#4 Aspect class
package in.nareshit.raghu.aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TxService {
	
	// pointcut : AS RT PACK.CLS.MN(PARAM)
	@Pointcut("execution(public String in.nareshit.raghu.dao.EmployeeDao.saveEmployee())")
	public void p1() {}
	
	// advice
	@Before("p1()") //joinpoint
	public void beginTx() {
		System.out.println("Tx Started!!");
	}
	
	@AfterReturning(value = "p1()", returning = "ob")
	public void commitTx(Object ob) {
		System.out.println("Tx is committed" + ob);
	}
	
	@AfterThrowing(value = "p1()",throwing = "th")
	public void rollbackTx(Throwable th) {
		System.out.println("Tx is rollback." + th.getMessage());
	}
	
	
	@After("p1()")
	public void sendReport() {
		System.out.println("Report sent!");
	}
	
}


S#5 Runner class
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.dao.EmployeeDao;

@Component
public class TestRunner implements CommandLineRunner {
	@Autowired
	private EmployeeDao dao;
	
	@Override
	public void run(String... args) throws Exception {
		dao.saveEmployee();
	}

}
===================================================================
From Advice, we need to call b.method by using joinpoint details
ie using : ProceedingJoinPoint.
It has a method  proceed() that makes call to b.method.
Even it returns value given by b.method (as Object).


package in.nareshit.raghu.aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TxService {
	
	// pointcut : AS RT PACK.CLS.MN(PARAM)
	@Pointcut("execution(public String in.nareshit.raghu.dao.EmployeeDao.saveEmployee())")
	public void p1() {}
	
	// advice
	@Around("p1()") //joinpoint
	public void aroundTest(ProceedingJoinPoint jp) {
		System.out.println("Before b.method");
		//code --> call : b.method
		try{
		//on success
		jp.proceed();
		}
		catch(Throwable e){
		//on failure
			e.printStackTrace();
		}
		//at any case
		System.out.println("After b.method");
	}
	
	
}
