				Date : 29-09-2021
				Spring Boot 6:30PM
				    Mr. RAGHU
		--------------------------------------------
Error and Exception handling
https://www.youtube.com/watch?v=AFq9eK2OoGU
https://www.youtube.com/watch?v=tBVAybXMKzY
https://www.youtube.com/watch?v=tBVAybXMKzY

Log4J
https://www.youtube.com/watch?v=mblGoKU1aKo
https://www.youtube.com/watch?v=mblGoKU1aKo

JUnit
https://www.youtube.com/watch?v=PT9WQ_Rz1ew
https://www.youtube.com/watch?v=Rue28g3reRI

			      Spring Boot ReST-Mini

a. ReST + Data JPA (Crud Operations) + Logging API
b. POSTMAN Testing
c. Swagger UI
d. Connection Pooling
e. Unit Test cases
===========================================================================
*) ReturnType : String, ResponseEntity<T> (in simple Http Response)

ResponseEntity= Body + Http Status

> Http Status to consumer that says 'what happened at producer side'
> HttpStatus it is a enum.
   -----------------------------------------     
     Code            Message
   -----------------------------------------     
     1xx             Information
     2xx             Success
     3xx             Redirect
     4xx             Client Side Error
     5xx             Server Side Error


*) Http Method:-
   GET        : fetch Resources
   POST       : new Resource
   PUT        : modify existed Resource
   DELETE     : Remove existed Resource
   PATCH      : Partially update Resource
=======================================================================
*) We can use Symbol ? to indicate type decided for generic while executing app.
*) Common Http Status code

  200 OK  - Successfully processed
  201 CREATED -- Successfully created new resource at server (POST)
  400 BAD REQUEST -- Data is Missing for Request
  401 Unauthorized - Un/pwd is invalid
  403 FORBIDDEN    - Role is invalid to access resource
  404 Not Found    - Resource not exist at Producer
  405 Method not allowed - Request HttpMethod, Code HttpMethod not matching
  406 Not Acceptable - Request MediaType output is not supported
  415 Unsupported MediaType - Request Body convertsion can not be done
  500 Internal Server Error - Exception at producer application

======Example RestController=========================================================
Name : ReturnTypeEx
Dep : Web, lombok, Devtools

*) Model
package in.nareshit.raghu.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Product {

	private Integer pid;
	private String pcode;
	private Double pcost;
}

*) Custom Exception


*) RestController

package in.nareshit.raghu.rest;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.model.Product;

@RestController
@RequestMapping("/product")
public class ProductRestController {

	@GetMapping("/find/{id}")
	public ResponseEntity<?> findOneProduct(
			@PathVariable Integer id
			) 
	{
		ResponseEntity<?> resp = null; 
		try {
			if(id>10)
				resp = new ResponseEntity<Product>(new Product(950, "AA", 200.5),
						HttpStatus.CREATED);
			else
				throw new ProductNotFoundException("NOT FOUND");
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			resp = new ResponseEntity<String>(
					"Error is " + e.getMessage(),
					HttpStatus.INTERNAL_SERVER_ERROR
					);
		}
		return resp;
	}
}
--Core java FAQ------------------------------------------------
Q) What is Serializable ? serialVersionUID ? Externalizable?
A) 
---------------------------------------------------------------
Layers Design :-
IL  : Integration Layer
SL  : Service Layer
DAL : Data Access Layer

Code files
1. Entity
2. Repository
3. Service
4. Custom Exception
5. ServiceImpl
6. RestController
---------------------------------
7. Global Exception handler
8. application.properties



--code---------
name : SpringBoot2RestMySQLCrudEx
Dep  : Lombok, Devtools, Data JPA, Web, MySQL

a. application.properties
server.port=8080

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


b. Entity
package in.nareshit.raghu.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Product {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name="pid")
	private Integer prodId;
	@Column(name="pcode")
	private String prodCode;
	@Column(name="pcost")
	private Double prodCost;
	@Column(name="pven")
	private String prodVendor;
	
}

c. Repository
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.entity.Product;

public interface ProductRepository 
	extends JpaRepository<Product, Integer> {

}


d. Service
package in.nareshit.raghu.service;

import java.util.List;

import in.nareshit.raghu.entity.Product;

public interface IProductService {

	Integer saveProduct(Product p);
	Product findOneProduct(Integer id);
	List<Product> findAllProducts();
	void deleteProduct(Integer id);
	void updateProduct(Product p);
}

e. custom exception
package in.nareshit.raghu.exception;

public class ProductNotFoundException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public ProductNotFoundException() {
		super();
	}
	
	public ProductNotFoundException(String message) {
		super(message);
	}
}


f. ServiceImpl
package in.nareshit.raghu.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.nareshit.raghu.entity.Product;
import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.repo.ProductRepository;
import in.nareshit.raghu.service.IProductService;

@Service
public class ProductServiceImpl implements IProductService {
	
	@Autowired
	private ProductRepository repo;

	public Integer saveProduct(Product p) {
		/*p = repo.save(p);
		Integer id = p.getProdId();
		return id;*/
		return repo.save(p).getProdId();
	}

	public Product findOneProduct(Integer id) {
		/*Optional<Product> opt = repo.findById(id);
		if(opt.isPresent()) {
			return opt.get();
		} else {
			throw new ProductNotFoundException(id+ " - not found");
		}*/
		return repo.findById(id).orElseThrow(
				()->new ProductNotFoundException(id+ " - not found")
				);
	}

	public List<Product> findAllProducts() {
		return repo.findAll();
	}

	public void deleteProduct(Integer id) {
		repo.delete(findOneProduct(id));
	}
	/**
	 * If given ID should not be null and ID exist in DB
	 * then update
	 */
	public void updateProduct(Product p) {
		if(null==p.getProdId() || !repo.existsById(p.getProdId())) {
			throw new ProductNotFoundException(p.getProdId()+ " - not found");
		} else {
			repo.save(p);
		}
	}

}


f. RestController
package in.nareshit.raghu.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.entity.Product;
import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.service.IProductService;

@RestController
@RequestMapping("/product")
public class ProductRestController {
	
	@Autowired
	private IProductService service;

	//1. create product
	@PostMapping("/save")
	public ResponseEntity<String> createProduct(
			@RequestBody Product product) 
	{
		ResponseEntity<String> resp = null;
		Integer id = service.saveProduct(product);
		resp = new ResponseEntity<String>(
				"Product '"+id+"' created",
				HttpStatus.CREATED);
		return resp;
	}
	
	//2. view all products
	@GetMapping("/all")
	public ResponseEntity<List<Product>> getAllProducts() {
		ResponseEntity<List<Product>> resp = null;
		List<Product> list = service.findAllProducts();
		resp = new ResponseEntity<List<Product>>(list, HttpStatus.OK);
		return resp;
	}
	
	//3. find one product by id
	@GetMapping("/find/{id}")
	public ResponseEntity<?> fetchOneProduct(
			@PathVariable Integer id
			)
	{
		ResponseEntity<?> resp = null;
		try {
			Product p = service.findOneProduct(id);
			resp = new ResponseEntity<Product>(p, HttpStatus.OK);
			
		} catch (ProductNotFoundException e) {
			e.printStackTrace();
			resp = new ResponseEntity<String>(
					e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return resp;
	}
	
	//4. delete one product
	
	//5. update one product
	
	//6. partial update (product code)
}

--Run app and test using postman screens------------
GET - fetch data, not to send data

