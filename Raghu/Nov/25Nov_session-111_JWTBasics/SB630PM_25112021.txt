			 Date : 25/11/2021
			  Spring Boot 6PM
			    Mr. RAGHU
	-----------------------------------------------
JWT Videos:-
https://www.youtube.com/watch?v=feETfZbvu-k
https://www.youtube.com/watch?v=Hzkw846jIOU


		Spring Boot - Rest Security (JWT)
		   JWT - JSON Web Token

*) ReST application are called as stateless.
  ie Do not Store current user data inside HttpSession.

=> HttpSession is created at Server.
=> Session object are created based on no.of clients login.
=> Additional Burden to server (memory).
=> HttpSession is good to use for monolithic application.
=> But now a days distributed apps are more, then multiple
   sessions for single user multiple devices is a not a good
   concept.
=> insted of HttpSession we better use Token Concept.
-----------------------------------------------------------
Server (ReST Application )
-> validate Login Details and Generate token on login success.
-> Send to Client device (never store with server)
-> Token is generated/validate by server using one secret key.

Client (JavaScript/Lang Application - Angular/ReactJs/Andriod)
-> Reads token and store inside (LocalStorage/SessionStorage)
-> Submit token for next time request
-> on logout delete token from memory by app.

*) Token never stored in cookies. They are stored inside
    LocalStorage/SessionStorage.

*) JWT Token looks like 
    xxxxxxxxxxxxxx.yyyyyyyyyyyyyyyyyyyyy.zzzzzzzzzzzz
     Header            Payload             Sign

*) To work with Java-JWT we must add below dependency
<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt</artifactId>
	<version>0.9.1</version>
</dependency>


Limitations:-
*) Token must never be shared from client device to any other. 
  Once a token is given to any diff client/user they can access data.

https://jwt.io/ : Only we can view payload, no modification
to validate token alwasy security code / secret is must.

Storages at Browser:-
https://www.w3schools.com/jsref/prop_win_localstorage.asp
https://www.w3schools.com/jsref/prop_win_sessionstorage.asp


==Maven Application===============================
1. pom.xml
<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
		
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>

	</dependencies>

2. Test class
package in.nareshit.raghu;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class Test {

	public static void main(String[] args) {
		String secret = "RAGHU";

		String token =
				Jwts.builder()
				.setId("1234") //userId
				.setSubject("username-ajay") //username
				.setIssuer("NareshIT") // token provider
				.setIssuedAt(new Date()) // gen Date
				.setExpiration(new Date(System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1))) // how it is valid
				.signWith(SignatureAlgorithm.HS256, secret.getBytes()) //sign alg + secret
				.compact(); //gen as string
		System.out.println(token);

		
		//claim the token
		Claims claims = 
				Jwts.parser()
				.setSigningKey(secret.getBytes())
				.parseClaimsJws(token)
				.getBody();
		
		System.out.println(claims.getSubject());
		System.out.println(claims.getId());
		System.out.println(claims.getIssuer());

	}
}
===========================================================
Spring Boot + JWT :-
a. Define one Filter class that checks token exist in request or not?

            Authentication = <token>


b. Util class for JWT (Generate Token and Validate Token)

    Jwts.builder()
    Jwts.parser()

c. Security Config and link Filter + Stateless security

   WebSecurityConfigurerAdapter
    configure() -- UserDetailsService
    configure() -- 
       antMatchers
       csrf() - disabled
       addFilter(Filter())
       state(Stateless)

*) No Logout in Token, just delete token is logout.

[permitAll]
Stage#1 Register User -- JSON (un,pwd, role..etc) 

[permitAll]
Stage#2 Login User -- JSON (un/pwd).. Resp(JWT Token/Invalid user)

[authentication]
Stage#3 Req for secured Resource (+token)
