			Date: 24/11/2021
			Spring Boot 6PM
			 Mr. RAGHU
	---------------------------------------------------
URL:
http://localhost:8080/user/register

*) To find current username in controller:-
Principal(I) [java.security]
  IS-A
Authentication(I) [org.springframework.security.core]
 IS-a
UsernamePasswordAuthenticationToken(C)

To read Authentication object code is:
S#1. Read securityContext object
 SecurityContext context = SecurityContextHolder.getContext();

s#2. Read authentication Object
Authentication authentication = context.getAuthentication();

S#3. Read current username
String username = authentication.getName();

--Full code-------
SecurityContext context = SecurityContextHolder.getContext();
Authentication authentication = context.getAuthentication();
String username = authentication.getName();
System.out.println(username);

--Short Format#1---------------
String username = SecurityContextHolder.getContext()
	.getAuthentication().getName();

---Short Format#2---------------------------
( Principal p ) as method param in controller
String username = p.getName();
System.out.println(username);
================================================
HttpSession is created by default when we login. So, need not
to create any new Session, just read as method param and
call setAttribute(key,val) to add data to Session.

class AbcController {
 m1(HttpSession session) {
   session.setAttribute("KEY",VAL);
 }
}

To read data at UI page :
[[${session.KEY}]]

===Modified HomeController class==========
package in.nareshit.raghu.controller;

import java.security.Principal;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import in.nareshit.raghu.model.User;
import in.nareshit.raghu.service.IUserService;

@Controller
public class HomeController {

	@Autowired
	private IUserService service;

	...
	
	@GetMapping("/profile")
	public String showProfile(
			Principal p,
			HttpSession session,
			Model model) 
	{
		/*SecurityContext context = SecurityContextHolder.getContext();
		Authentication authentication = context.getAuthentication();
		String username = authentication.getName();
		System.out.println(username);*/
		
		//String username = SecurityContextHolder.getContext().getAuthentication().getName();
		String username = p.getName();
		System.out.println(username);//emailId
		
		Optional<User> opt = service.findByUserMail(username);
		User user = opt.get();
		
		session.setAttribute("username", user.getUserName());
				
				
		return "ProfilePage";
	}
	
	..
}
------------ProfilePage.html---------------
<html xmlns:th="https://www.thymeleaf.org/">
	<head></head>
	<body>
		<h3>WELCOME TO PROFILE PAGE</h3>
		<b> Hello User [[${session.username}]] </b>
		<a th:href="@{/signout}">LOGOUT</a>
	</body>
</html>
==========================================================
Bootstrap 4 navbar
----------------------------------------------------------
*) When we request to load any page, that is loaded with
 one token, given by server.

CsrfAuthenticationStrategy(C) --Generate
CsrfRequestDataValueProcessor (C) -- Validate

Example:
f69bc143-2686-475b-b8b6-6742ed87daab

*) This is given as Hidden Input, even client makes request
  using any unknown links/ads/spams, server try to read and
  validate token first, if not a valid token no service 
  is provided.

CSRF : Cross Site Request Forgery
A Request Object/Link/Form created by attacker, executed
by users, then server will execute such request.

To avoid this CSRF Token is added by Spring Security.
It is not a cookie/storeage to read by any other servers.
It is a hidden input.
========================================================
