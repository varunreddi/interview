			 Date : 09/08/2021
			  Spring Boot 6:30Pm
			    Mr. RAGHU
		----------------------------------------
Q) What is Bi-Directional Mapping? How can we implement this?

https://github.com/javabyraghu?tab=repositories&q=hibernate&type=&language=&sort=

			Spring Data JPA- one-to-one


  Ex:        1...1
    Employee -----<> Passport

*) To implement 1...1 we use *...1 and apply Unique condition
   that behaves like 1...1. (@ManyToOne)

Q) Why cant we use @OneToOne?
A) It will not create any FK column.

Q) Then why this annotation is used?
A) Bi-directional mapping purpose.


Q) Can A FK column have duplicates?
A) yes. FK column can be duplicated and null values even allowed.


Examples:-
Student (HAS-A) Address
Product (HAS-A) Model 
Car (HAS-A) Engine

Free Images server: https://imgbb.com/

https://i.ibb.co/jDm0ncf/sample1.jpg
https://i.ibb.co/qsh4tMg/sample2.jpg

*)Note:
SQLSyntaxErrorException: Unknown database 'boot630pm'

--- mysql---------------------------
> create database boot630pm
> use boot630pm
> show tables
 

----pom.xml For Oracle--------------------------------------------------------------------------
For Oracle 10g/11g/9i/12C databases:-
<dependency>
	<groupId>com.oracle.database.jdbc</groupId>
	<artifactId>ojdbc8</artifactId>
	<scope>runtime</scope>
</dependency>

OJDBC6:-
<dependency>
    <groupId>com.jslsolucoes</groupId>
    <artifactId>ojdbc6</artifactId>
    <version>11.2.0.1.0</version>
</dependency>


---application.properties--------
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=raghu
spring.datasource.password=raghu

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
---------------------------------


SQL> select * from global_name;
Output: XE

cmd> tnsping XE
copy port number

--For a new Oracle User account------------
SQL> create user raghu identified by raghu;
User created.

SQL> grant dba to raghu;
Grant succeeded.

SQL> conn
 raghu
 raghu

SQL> select * from tab;

check tables data
====Full Code====================================
Name : SpringBoot2DataJpaOneToOne
Dep  : Lombok, Data Jpa, MySQL

1. application.properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

2. Model class
package in.nareshit.raghu.model;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="passporttab")
public class Passport {
	
	@Id
	private Integer pid;
	private String passCode;
	private String issuedBy;
	
	@Temporal(TemporalType.DATE)
	private Date expDate;
	
}
-----------
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="emptab")
public class Employee {
	
	@Id
	private Integer eid;
	private String ename;
	private Double esal;
	
	private String imgUrl;
	
	@ManyToOne
	@JoinColumn(name="pidFk",unique = true)
	private Passport pob; //HAS-A
	
}

2. Repository Interface
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Employee;

public interface EmployeeRepository
	extends JpaRepository<Employee, Integer> {

}
----------
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Passport;

public interface PassportRepository 
	extends JpaRepository<Passport, Integer> {

}

3. Runner class
package in.nareshit.raghu.runner;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.model.Passport;
import in.nareshit.raghu.repo.EmployeeRepository;
import in.nareshit.raghu.repo.PassportRepository;

@Component
public class DataInserRunner implements CommandLineRunner {

	@Autowired
	private PassportRepository prepo;
	
	@Autowired
	private EmployeeRepository erepo;
	
	public void run(String... args) throws Exception {
		Passport p1 = new Passport(1101, "A-IUJ-HYD-55012", "GOVT OF INDIA", 
				new Date(
						System.currentTimeMillis() + TimeUnit.DAYS.toMillis(365*10))
				);
		Passport p2 = new Passport(1102, "MMJ-FRG-HYD-84501", "GOVT OF INDIA", 
				new Date(
						System.currentTimeMillis() + TimeUnit.DAYS.toMillis(365*10))
				);
		prepo.save(p1);
		prepo.save(p2);
		
		Employee e1 = new Employee(306, "SAM", 2000.0,"https://i.ibb.co/jDm0ncf/sample1.jpg", p1);
		Employee e2 = new Employee(307, "SYED", 4000.0,"https://i.ibb.co/qsh4tMg/sample2.jpg", p2);

		erepo.save(e1);
		erepo.save(e2);
		System.out.println("DONE");
		
		
	}

}
----------------------------------------------------------------
Q) Employee ---- Department  
   ex: SAM         DEVLOPMENT

   If i delete SAM , should i delete Department data also?

A) No.
  HAS-A(Association) is called as Aggregation (Loose-couple)

Q) Employee ---- Passport
 ex: SAM          P989-GAT-965210

If i delete SAM , should i delete Passport data also?

A) Yes. 
HAS-A(Association) is called as Composition (Strong-Relation)
============================================================
Cascading: Apply operation on child object which is implemented
    on parent object, without additional code.

    can be applied for every multiplicity

Ex: Parent deleted --- child should be deleted
    Parent saved   --- child should be saved.

--Example--
@Entity
@Table(name="emptab")
public class Employee {

 ..
	@ManyToOne(cascade = CascadeType.ALL)
	@JoinColumn(name="pidFk",unique = true)
	private Passport pob; //HAS-A
	
}

--Runner clas code---
package in.nareshit.raghu.runner;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.model.Passport;
import in.nareshit.raghu.repo.EmployeeRepository;

@Component
public class DataInserRunner implements CommandLineRunner {

	//@Autowired
	//private PassportRepository prepo;
	
	@Autowired
	private EmployeeRepository erepo;
	
	public void run(String... args) throws Exception {
		Passport p1 = new Passport(1101, "A-IUJ-HYD-55012", "GOVT OF INDIA", 
				new Date(
						System.currentTimeMillis() + TimeUnit.DAYS.toMillis(365*10))
				);
		Passport p2 = new Passport(1102, "MMJ-FRG-HYD-84501", "GOVT OF INDIA", 
				new Date(
						System.currentTimeMillis() + TimeUnit.DAYS.toMillis(365*10))
				);
		//prepo.save(p1);
		//prepo.save(p2);
		
		Employee e1 = new Employee(306, "SAM", 2000.0,"https://i.ibb.co/jDm0ncf/sample1.jpg", p1);
		Employee e2 = new Employee(307, "SYED", 4000.0,"https://i.ibb.co/qsh4tMg/sample2.jpg", p2);

		erepo.save(e1);
		erepo.save(e2);
		System.out.println("DONE");
		
		
	}

}
===========================================================
FetchType (Enum) : EAGER/ LAZY (SELECT/findById)

EAGER: When we fetch parent data, also fetch its child data
LAZY: When we fetch parent data, do not fetch its child data

   Non-Collection              Collection
      1...1                        1...*
      *...1                        *...*
      (EAGER)                     (LAZY)

LAZY:
Hibernate: select eid, ename, esal , img_url , pid_fk 
           emptab  where eid=?
EAGER:
select eid, ename , esal, img_url , pid_fk, 
   pid, exp_date , issued_by , pass_code 
   
   from emptab 
     left outer join 
   passporttab 
   
   on pid_fk=pid 
   
   where eid=?

--Example------------------------
@ManyToOne(cascade = CascadeType.ALL,fetch = FetchType.EAGER)
@JoinColumn(name="pidFk",unique = true)
private Passport pob; //HAS-A
----------------------------

---Example Runner---
package in.nareshit.raghu.runner;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.repo.EmployeeRepository;

@Component
public class DataSelectRunner implements CommandLineRunner {

	@Autowired
	private EmployeeRepository repo;
	
	public void run(String... args) throws Exception {
		Optional<Employee> opt = repo.findById(306);
		System.out.println("CHECK GENERATED SQL");
	}

}
============================================================