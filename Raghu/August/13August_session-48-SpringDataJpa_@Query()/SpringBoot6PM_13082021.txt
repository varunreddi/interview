			     Date : 13-Aug-21
			    Spring Boot 6:30PM
			      Mr. RAGHU
	-----------------------------------------------------------
			Using @Query with Data JPA

=> If we are using @Query method name can be any name.
=> ReturnType and Parameters must be matching.

=> We can pass patameters (inputs to Query) in two ways
   a. Positional Parameters (JDBC-Style)
   b. Named Parameters (ORM-Style)

a. Positional Parameters (JDBC-Style):-
> In latest versions, use ?1, ?2, ?3...etc (with position numbers)
> Only ? Symbols are no longer suppotred.
> You may get IllegalArgumentException: JDBC style parameters (?) 
               are not supported for JPA queries.

> No.of ?<index> must have equal parameters count, dataType must be matching
> variableName and Param name need not to mach.

------------------------------------------------------
b. Named Parameters (ORM-Style)
> Replace ?<number> using :<name> (colon and name)
> using name as Parameter.
> in this case method param, query param must be matching.


=======code=======================================================
Name : SpringBoot2DataJpaQueryAnno
Dep  : Lombok, Data JPA, MySQL

1. Model class
package in.nareshit.raghu.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="booktab")
public class Book {
	@Id
	@Column(name="bid")
	private Integer bookId;
	
	@Column(name="bname")
	private String bookName;
	
	@Column(name="bauthor")
	private String author;
	
	@Column(name="btype")
	private String bookType;
	
	@Column(name="bcost")
	private Double bookCost;
}

2. application.properties
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

3. Repository Interface
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

4. Runner for Insert
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;

import in.nareshit.raghu.model.Book;
import in.nareshit.raghu.repo.BookRepository;

//@Component
public class BookDataInsertRunner implements CommandLineRunner {

	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		
		repo.save(new Book(1011, "Core Java","SAM", "Backend", 500.0));
		repo.save(new Book(1012, "Adv Java","SYED", "Backend", 600.0));
		repo.save(new Book(1013, "Hibernate","RAM", "Backend", 700.0));
		repo.save(new Book(1014, "BOOT AND MS","SYED", "Backend", 800.0));
		repo.save(new Book(1015, "Angular","SAM", "Frontend", 500.0));
		repo.save(new Book(1016, "Bootstrap","SYED", "Frontend", 600.0));
		repo.save(new Book(1017, "HTML and CSS","RAM", "Frontend", 400.0));
		repo.save(new Book(1018, "JQuery",null, "Frontend", 400.0));
		repo.save(new Book(1019, "Tool",null, "Backend", 200.0));
		
		
	}

}

5. Runner for Test
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.repo.BookRepository;

@Component
public class BookTestDataRunner implements CommandLineRunner {

	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		//repo.getAllBooks()
		//repo.getAllBookNames()
		//.forEach(System.out::println);
		
		/*repo.getAllBooksInfo()
		.stream()
		.map(ob->ob[0]+"-"+ob[1]+"-"+ob[2]) //Object[] --> String
		.forEach(System.out::println);*/
		
		//repo.getAllBooksByIds(1010).forEach(System.out::println);
		//repo.getBookNamesByIdOrAuthor(100, "SYED").forEach(System.out::println);
		//repo.getBookNamesByInputs(100, "SYED", 1200.0).forEach(System.out::println);
		
		//repo.getAllBooksIdBased(100).forEach(System.out::println);
		//repo.getBookNamesUsingIdAuth(100, "SAM").forEach(System.out::println);
		
		//repo.getBookNamesInputs(100, "AJAY", 1200.0).forEach(System.out::println);
		//repo.getBookDataA(Arrays.asList(1011,1015,1018)).forEach(System.out::println);
		
		//repo.getBookDataB(1011, 1018).forEach(System.out::println);
		//repo.getBookDataC().forEach(System.out::println);
		//repo.getBookDataD("___").forEach(System.out::println);
		repo.getBookDataD("S%").forEach(System.out::println);
	}

}
=============================================================================
Find nth highest value:-
> select  distinct bcost from booktab order by bcost desc limit 2,1;

> select  * from booktab limit rowId,maxRows;
> select  * from booktab limit 0,3;

> RowId is givenby Database starts from zero.
-----------------------------------------------------------------------------