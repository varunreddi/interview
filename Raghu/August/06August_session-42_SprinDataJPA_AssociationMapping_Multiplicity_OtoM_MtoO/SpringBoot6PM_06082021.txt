			Date : 06/08/2021
			Spring Boot 6:30PM
			  Mr. RAGHU
	---------------------------------------------
Hibernate based Examples:
https://github.com/javabyraghu/HibernateManyToOne
https://github.com/javabyraghu/HibernateOneToOneFullEx
https://github.com/javabyraghu/HibernateManyToManyFullEx
https://github.com/javabyraghu/HibernateOneToManyFullEx


	      Association Mapping using Data JPA

+-------------------------+-------------------------+
| Non-Collection Based    |	Collection Based    |
+-------------------------+-------------------------+
     1...1                       1...*
     *...1                       *...*
+-------------------------+-------------------------+

*)Coding Steps
a. Define two classes with HAS-A Relation
b. Check for Collection Type , if yes convert HAS-A
      variable as Collection type
c. Apply Multiplcitiy Annotation over HAS-A variable

   @ManyToOne  + unique        ----  1...1
   @OneToMany                  ----  1...*
   @ManyToOne                  ----  *...1
   @ManyToMany                 ----  *...*

d. Provide @JoinColumn(FK Column) or @JoinTable(*...*)
   at HAS-A Variable level
e. Design tables with PK-FK columns

Q) can foreignkey and primary key column should be same name?
A) No need. DataType must be same.

====Code(ManyToOne)==============================================
Name : SpringBoot2DataJpaManyToOneEx
Dep  : Lombok, Data JPA, MySQL

1. application.properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create

2. Models
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="ventab")
public class Vendor {
	@Id
	private Integer vid;
	private String vcode;
	private String vaddr;
}
--
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="prodtab")
public class Product {
	@Id
	private Integer pid;
	private String pname;
	private Double pcost;
	
	@ManyToOne
	@JoinColumn(name="vidFk")
	private Vendor vob;//HAS-A
	
}

3. Repository Interfaces

package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Vendor;

public interface VendorRepository 
	extends JpaRepository<Vendor, Integer> {

}
----------------
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Product;

public interface ProductRepository 
	extends JpaRepository<Product, Integer> {

}

4. Runner class
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.model.Vendor;
import in.nareshit.raghu.repo.ProductRepository;
import in.nareshit.raghu.repo.VendorRepository;

@Component
public class TestDataRunner implements CommandLineRunner {
	
	@Autowired
	private VendorRepository vrepo;
	
	@Autowired
	private ProductRepository prepo;

	public void run(String... args) throws Exception {
		Vendor v1 = new Vendor(501,"NIT","HYD-IND");
		Vendor v2 = new Vendor(502,"XYZ","MUM-IND");
		
		vrepo.save(v1);
		vrepo.save(v2);
		
		Product p1 = new Product(101, "E-BOOK", 1200.0, v1);
		Product p2 = new Product(102, "PEN", 200.0, v1);
		Product p3 = new Product(103, "TAB", 4200.0, v1);
		
		Product p4 = new Product(104, "KEYBOARD", 800.0, v2);
		Product p5 = new Product(105, "MOUSE", 450.0, v2);
		Product p6 = new Product(106, "CPU", 9200.0, v2);
		
		prepo.save(p1);
		prepo.save(p2);
		prepo.save(p3);
		prepo.save(p4);
		prepo.save(p5);
		prepo.save(p6);
		
		System.out.println("DONE");
		
		
	}

}



*) Note:
PK Column - Unique + not-null(no duplicates)

FK Column - Referes another table PK column
            Can be null
	    Can have duplicates
	    But FK value must be existed PK value

====Task for ManyToOne=============================================
     
	      *...1
    Employee ------<> Department


              *...1
       State ------<> Country


             *...1
    Students ------<> Branch 

==(code: OneToMany)======================================
Name : SpringBoot2OneToMany
Dep  : Lombok, Data Jpa, MySQL

1. application.properties

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create
-------------

2. model class
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="addrtab")
public class Address {
	@Id
	private Integer aid;
	private String loc;
	private String pinCode;
}
-------------
package in.nareshit.raghu.model;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="emptab")
public class Employee {
	
	@Id
	private Integer eid;
	private String ename;
	private Double esal;
	
	@OneToMany
	@JoinColumn(name="eidFk")
	private List<Address> aobs;//HAS-A
	
}

2. Repository Interface
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Address;

public interface AddressRepository 
	extends JpaRepository<Address, Integer> {

}
----------
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Employee;

public interface EmployeeRepository 
	extends JpaRepository<Employee, Integer> {

}


3. Runner class
package in.nareshit.raghu.runner;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Address;
import in.nareshit.raghu.model.Employee;
import in.nareshit.raghu.repo.AddressRepository;
import in.nareshit.raghu.repo.EmployeeRepository;

@Component
public class TestDataRunner implements CommandLineRunner {

	@Autowired
	private AddressRepository arepo;
	
	@Autowired
	private EmployeeRepository erepo;
	
	public void run(String... args) throws Exception {
		Address a1 = new Address(10, "5-55/A,SNT", "500032");
		Address a2 = new Address(11, "6-25/B,STT", "500031");
		
		Address a3 = new Address(12, "8-55/B,BBC", "400032");
		Address a4 = new Address(13, "9/B-87,AA", "400031");
		
		arepo.save(a1);
		arepo.save(a2);
		arepo.save(a3);
		arepo.save(a4);
		
		
		Employee e1 = new Employee(1102, "AJAY", 5000.0, Arrays.asList(a1,a2));
		Employee e2 = new Employee(1103, "SYED", 6000.0, Arrays.asList(a3,a4));
		
		erepo.save(e1);
		erepo.save(e2);
		System.out.println("DONE");
	}

}
========================================================