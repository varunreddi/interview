			 Date : 10/08/2021
			 Spring Boot 6:30PM
			   Mr. RAGHU
		--------------------------------
Task: (Spring Boot WEB MVC)
https://www.youtube.com/watch?v=O8MtjB0Ru0E

		Spring Boot - Data JPA Custom Query

a. findBy abstract method -- SELECT Operation
b. @Query -- SELECT and Non-SELECT (JPQL/HQL)

=====================================================
a. findBy :
   We need define one abstract method inside Repository interface

Syntax:
<ReturnType>  findBy<VariableName><Keyword>(<DatType> <VariableName>);

  Above Syntax internally generates one SELECT SQL Query with 
   WHERE Condition.

-Example--------------------------------------
class Student {
  String stdName;
  Double stdFee;
  String branch;
}
*)Inside StudentRepository:
     //SELECT * FROM STDTAB WHERE SNAME=?
     Optional<Student>  findByStdName(String stdName)

     //SELECT * FROM STDTAB WHERE SFEE < ?
     List<Student> findByStdFeeLessThan(Double stdFee);

     //SELECT * FROM STDTAB WHERE branch like ?
     List<Student>  findByBranchLike(String branch);

     //SELECT * FROM STDTAB WHERE SNAME IS NOT NULL
     List<Student> findByStdNameIsNotNull()

Note:
1.  If your query seems to returns only single row data then use
  RetunType as : Optional<T>
  else for multiple row data use : List<T>

2. If we did not use any keyword then symbol is = (equal)
   even we can use Is (or) Equals to generate same.

3. When we use findBy method it generates SQL query need not to
    define any query manually.

4. not equals    !=  (in java)   |  <> (in sql)

==code======================================
Name : SpringBoot2DataJpaFindByEx
Dep  : Lombok, MySQL, Data JPA

1. application.properties
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="booktab")
public class Book {
	@Id
	@Column(name="bid")
	private Integer bookId;
	
	@Column(name="bname")
	private String bookName;
	
	@Column(name="bauthor")
	private String author;
	
	@Column(name="btype")
	private String bookType;
	
	@Column(name="bcost")
	private Double bookCost;
}


3. Repository
package in.nareshit.raghu.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Book;

public interface BookRepository 
	extends JpaRepository<Book, Integer> 
{
	//SELECT * FROM BOOKTAB WHERE AUTHOR=?
    List<Book>	findByAuthor(String author);
    List<Book>	findByAuthorIs(String author);
    List<Book>	findByAuthorEquals(String author);
    
    //SQL: SELECT *FROM BOOKTAB bookCost > ?
    List<Book> findByBookCostGreaterThan(Double bookCost);
    //SQL: SELECT *FROM BOOKTAB bookCost >= ?
    List<Book> findByBookCostGreaterThanEqual(Double bookCost);
    
    //SQL:  SELECT * FROM BOOKTYPE WHERE bookType !=?
    List<Book> findByBookTypeNot(String bookType);
    
    //SQL: SELECT * FROM BOOKTYPE WHERE bookId Between ? and ?
    List<Book> findByBookIdBetween(Integer bookId1,Integer bookId2);
    
    
}

4. Runner class (Insert)
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;

import in.nareshit.raghu.model.Book;
import in.nareshit.raghu.repo.BookRepository;

//@Component
public class BookDataInsertRunner implements CommandLineRunner {

	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		
		repo.save(new Book(1011, "Core Java","SAM", "Backend", 500.0));
		repo.save(new Book(1012, "Adv Java","SYED", "Backend", 600.0));
		repo.save(new Book(1013, "Hibernate","RAM", "Backend", 700.0));
		repo.save(new Book(1014, "BOOT AND MS","SYED", "Backend", 800.0));
		repo.save(new Book(1015, "Angular","SAM", "Frontend", 500.0));
		repo.save(new Book(1016, "Bootstrap","SYED", "Frontend", 600.0));
		repo.save(new Book(1017, "HTML and CSS","RAM", "Frontend", 400.0));
		repo.save(new Book(1018, "JQuery",null, "Frontend", 400.0));
		repo.save(new Book(1019, "Tool",null, "Backend", 200.0));
		
		
	}

}

5. Runner class (test findBy)
package in.nareshit.raghu.runner;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Book;
import in.nareshit.raghu.repo.BookRepository;

@Component
public class BookFindByTestRunner implements CommandLineRunner {

	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		//List<Book> list = repo.findByAuthor("SYED");
		//List<Book> list = repo.findByAuthorIs("SYED");
		//List<Book> list = repo.findByAuthorEquals("SYED");
		
		//List<Book> list = repo.findByBookCostGreaterThan(400.0);
		//List<Book> list = repo.findByBookCostGreaterThanEqual(400.0);
		//List<Book> list = repo.findByBookTypeNot("Frontend");
		List<Book> list = repo.findByBookIdBetween(1012, 1015);
		list.forEach(System.out::println);
	}

}