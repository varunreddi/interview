				Date : 23-Jul-21
				Spring Boot 6:30PM
				  Mr. RAGHU
	------------------------------------------------------------
Dynamic Proxy class
https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html

Multiple Database
https://www.youtube.com/watch?v=nzszxQbQ5WU

			    Spring Boot - Data JPA

        Theory  ------------- ORM
 Specification  ------------- JPA [Java Persitency API] (Sun/Oracle)
        Vendor  ------------- Hibernate (JBoss)

*) This time need not to write code for persistence.xml and Operations Code
   (Test class) ie creating EntityManagerFactory, EntityManager,
   EntityTransaction..etc

*) Complete all Database Operations code is generated by Data JPA
   which internally uses JPA (with Hibernate) Specification.

*) Spring Boot has provided a jar name : spring-boot-starter-data-jpa
*) Data JPA is expecting two files from programmer

a. Model class /Entity class
b. Repository Interface.

*) You define one interface with any name, that extends one of below interfaces

a. CrudRepository<T, ID>  
b. PagingAndSortingRepository<T, ID>
c. JpaRepository<T, ID>  

T = Entity/Model class Name
ID = DataType of Primary

*) Even Data JPA has provided Impl class : SimpleJpaRepository<T, ID>

*********** ctrl+shift+T  : open type *****************
*********** ctrl+O  : View members *****************

---Basic Example--------------------
@Entity
class Student {
 @Id
 Integer sid;
 String sname;
 set/get..
}

interface StudentOperations extends CrudRepository<Student, Integer>  {

}

--Generated class looks----------------------------------------
@Repository
class Proxy$1 implements  CrudRepository<Student, Integer>  {

	private final EntityManager em;

	@Transactional
	@Override
	public <S extends T> S save(S entity) {

		Assert.notNull(entity, "Entity must not be null.");

		if (entityInformation.isNew(entity)) {
			em.persist(entity);
			return entity;
		} else {
			return em.merge(entity);
		}
	}
}
---Type of Database----------------------------------------------------
a. Embedded Database
 No Download + No Install + No table creations manually
 No Configuration (driver,url,...etc)

=> These are called as InMemory (RAM).
=> When Application is started these are created, removed when app stop.
=> But we need to add JARs(Dependecnies)
=> Recomanded only in Dev/Test Env only. Never use in Production.

--3 embeeded Databases (SQL)---------
H2 
HSQL(HyperSQL)
Apache Derby
-------------------------------------
b. External Database (Ex: MySQL/Oracle)

=> Download and Install
=> Provide your properties (only keys) which are pre-defined

spring.datasource.driver-class-name=
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=

spring.jpa.show-sql=
spring.jpa.hibernate.ddl-auto=
spring.jpa.database-platform=


--Core java-------------------------------------------------------
1. Reflection
   https://www.youtube.com/c/NareshIT/search?query=reflection

2. Sun Dynamic Proxy | Java Dynamic Proxy 
   https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html

   https://github.com/javabyraghu/DynamicProxyExample

======(Basic Example)=================================================================
Name : SpringBoot2DataJpaFirstEx
Dep  : Spring Data JPA, MySQL (Oracle/Postgress), Lombok

1. application.properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="prodtab")
public class Product {
	
	@Id
	@Column(name="pid")
	private Integer prodId;
	
	@Column(name="pcode")
	private String prodCode;
	
	@Column(name="pcost")
	private Double prodCost;
	
}

3. Repository
package in.nareshit.raghu.repo;

import org.springframework.data.repository.CrudRepository;
import in.nareshit.raghu.model.Product;

public interface ProductRepository extends CrudRepository<Product, Integer>
{

}

4. Test 
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

@Component
public class TestOperationsRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;
	
	public void run(String... args) throws Exception {
		System.out.println(repo.getClass().getName());
		repo.save(new Product(101, "PEN", 200.0));
		
	}

}
===================================================================


