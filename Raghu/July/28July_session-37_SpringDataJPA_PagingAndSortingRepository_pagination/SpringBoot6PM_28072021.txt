				Date : 28-Jul-21
				Spring Boot 6:30PM
				   Mr. RAGHU
		---------------------------------------------------
			Repository Interfaces (3)
CrudRepository
  IS-A
PagingAndSortingRepository
  IS-A
JpaRepository
-----------------------------------------------------------------------------
PagingAndSortingRepository:-
*) Pagination using Data JPA:-

If we use normal findAll() method that gets all row from DB table as List
Generated SQL looks like:
	SELECT * FROM TABLENAME;

> if no of rows are more then do not fetch all rows.
  Convert Table into multple equal parts (Pages) and get data
  Part by Part (page by page) based on EndUser Request.

>*** In PagingAndSortingRepository a method given to implement pagination

   findAll(Pageable p) : Page<T>

Q) What is Pageable?
A) Pageable is Input that we need to pass todo pagination
   
   Pageable =>> Page Number + Page Size

 *) Here Pageable is interface, PageRequest is Impl class

    Pageable  p = PageRequest.of(pageNum,pageSize);
   Ex:
     Pageable  p = PageRequest.of(2,3);

  We can even pass sort details also
    Pageable  p = PageRequest.of(pageNum,pageSize,sort);
   Ex:
     Pageable  p = PageRequest.of(2,3,Sort.by("empName"));

-----------------------------------------------------------
Q) What is Page?

A) The output of Pagination given By Database is stored inside this object
   Which contains
         Data  -- List<T> [Content]

	 and

	 MetaData
	    isFirstPage
	    isLastPage
	    has Next
	    has Previous
	    total page
	    current page number
	    page size
	    total rows
	    ...etc
====code============================================================
Name : SpringBoot2DataJpaPageAndSortEx
Dep  : Data jpa, mysql, lombok

1. application.properties
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Product {
	
	@Id
	private Integer pid;
	private String pcode;
	private Double pcost;
	private String vendor;
	
}

3. Repository Interface
package in.nareshit.raghu.repo;

import org.springframework.data.repository.PagingAndSortingRepository;

import in.nareshit.raghu.model.Product;

public interface ProductRepository 
	extends PagingAndSortingRepository<Product, Integer> 
{

}

4. Runner class for Data Insert
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

//@Component
public class ProductDataInsertRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;
	
	public void run(String... args) throws Exception {
		repo.save(new Product(550, "PEN", 200.0, "NIT"));
		repo.save(new Product(551, "BOOK", 800.0, "XYZ"));
		repo.save(new Product(552, "BAT", 250.0, "NIT"));
		repo.save(new Product(553, "LAP", 1600.0, "TEST"));
		
		repo.save(new Product(554, "BOX", 210.0, "NIT"));
		repo.save(new Product(555, "MOBIL", 5800.0, "TEST"));
		repo.save(new Product(556, "MOUSE", 260.0, "NIT"));
		repo.save(new Product(557, "KEYBRD", 500.0, "XYZ"));

		repo.save(new Product(558, "TRB", 400.0, "XYZ"));
		repo.save(new Product(559, "MNO", 300.0, "NITs"));
		
	}

}

5. Runner class for Data Pagination
package in.nareshit.raghu.runner;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

@Component
public class ProductDataPaginationRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;
	
	public void run(String... args) throws Exception {
		//page num, page size
		Pageable pageable = PageRequest.of(0, 3);
		
		Page<Product> page = repo.findAll(pageable);
		
		//methods in Page
		//Content/Data
		List<Product> list = page.getContent();
		list.forEach(System.out::println);
		
		//-----------meta data---------------------
		System.out.println("---------------------------------");
		System.out.println("Is First Page => " + page.isFirst());
		System.out.println("Is Last Page => " + page.isLast());
		System.out.println("Has Next Page => " + page.hasNext());
		System.out.println("Has Previous Page => " + page.hasPrevious());
		System.out.println("Total Page => " + page.getTotalPages());
		System.out.println("Total Rows => " + page.getTotalElements());
		System.out.println("Current Page number => " + page.getNumber());
		System.out.println("Current Page Size => " + page.getSize());
	}

}


6. Runner class for Data Sorting
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

//@Component
public class ProductDataSortRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;

	public void run(String... args) throws Exception {
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ***/
		/*
		//a. create Sort(C) object
		Sort s1 = Sort.by("vendor");

		//call findAll method with Sort object
		Iterable<Product> list = repo.findAll(s1);

		//print (JDK 5-forEach)
		for(Product p:list) {
			System.out.println(p);
		}
		 */
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR DESC ***/
		/*Sort s2 = Sort.by(Direction.DESC, "vendor");
		Iterable<Product> list = repo.findAll(s2);
		for(Product p:list) {
			System.out.println(p);
		}*/

		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ,PCOST ASC ***/
		/*Sort s3 = Sort.by("vendor","pcost"); // ASC
		Iterable<Product> list = repo.findAll(s3);

		for(Product p:list) {
			System.out.println(p);
		}*/
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR DESC ,PCOST DESC ***/
		/*Sort s4 = Sort.by(Direction.DESC, "vendor","pcost"); //DESC
		Iterable<Product> list = repo.findAll(s4);

		for(Product p:list) {
			System.out.println(p);
		}*/
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ,PCOST DESC ***/
		Sort s5 = Sort.by(Order.asc("vendor"),Order.desc("pcost"));
		Iterable<Product> list = repo.findAll(s5);

		for(Product p:list) {
			System.out.println(p);
		}
		
	}

}

