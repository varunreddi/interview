				Date : 27-Jul-21
				Spring Boot 6:30PM
				   Mr. RAGHU
	------------------------------------------------------------------
Everyday Java Concepts # 5:30 pm to 6:30pm
Zoom Id : 99582895224  Pwd: 112233
https://classroom.google.com/c/Mzc0Nzc3OTk4NjM5?cjc=bbruebk 

		Data Sorting and Pagination using DATA JPA
		  [ PagingAndSortingRepository<T,ID> ]

=> PagingAndSortingRepository is a sub interface of CrudRepository.
=> PagingAndSortingRepository is providing 2 abstract methods
	a. Sort and Fetch data
	b. Fetch data using pagination


--Example SQLs for data sorting-----------------------
select * from  product order by vendor asc;
select * from  product order by vendor desc;

select * from  product order by vendor asc ,pcost asc;
select * from  product order by vendor desc,pcost desc;

select * from  product order by vendor asc,pcost desc;


---------API----------------------------------------------
public class Sort {
   
   public static Sort by(String... properties) {  //default is ASC
        //sorting logics
   }

   public static Sort by(Direction direction, String... properties) {
      //sorting logics
   }
 

   //Ref: https://www.youtube.com/watch?v=U_6Na31fhsE
   public static enum Direction {
        ASC, DESC
   }

}
// 3dots - any no of params
Ex#1
Sort s1 = Sort.by("vendor"); //ASC
//inside meaning is -- order by vendor asc;

Ex#2
Sort s2 = Sort.by(Direction.DESC,"vendor"); //DESC
//inside meaning is -- order by vendor desc;

--------------------------------------------
*) findAll(Sort sort): Iterable<T> 
   This method exist in PagingAndSortingRepository that takes Sort(C) object
   as input and returns Collection data.

>> SQL Genrated and data sorting done at Database side(not at Java App)

>> Sort class has static method by() overloaded.

    by(String.... properties) {  }  //for ASC based sort


    by(Direction direction,String.... properties) {  }  //for ASC/DESC based sort

>> Here Direction is a Inner Enum inside Sort(C).
   enum Direction { ASC, DESC }


====API=================================================================
public class Sort {

  public static Sort by(Order... orders) { //logic }

  public class Order {

     public static Order asc(String propertyName) { //logic }

     public static Order desc(String propertyName) { //logic }

  }

}
Ex:1 // order by vendor asc, pcost desc
Sort.by(Order.asc("vendor"),Order.desc("pcost));

Ex#2 // order by ename desc, dept asc, proj desc
Sort.by(Order.desc("ename"), Order.asc("dept"), Order.desc("proj"))

*) In this case, no need of using Direction enum.


===Full Code=================================================================
Name : SpringBoot2DataJpaPageAndSort
Dep  : Spring Data Jpa, Lombok, MySQL


1. application.properties
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot630pm
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Product {
	
	@Id
	private Integer pid;
	private String pcode;
	private Double pcost;
	private String vendor;
	
}

3. Repository
package in.nareshit.raghu.repo;

import org.springframework.data.repository.PagingAndSortingRepository;

import in.nareshit.raghu.model.Product;

public interface ProductRepository 
	extends PagingAndSortingRepository<Product, Integer> 
{

}

4. Data Insert Runner
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

//@Component
public class ProductDataInsertRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;
	
	public void run(String... args) throws Exception {
		repo.save(new Product(550, "PEN", 200.0, "NIT"));
		repo.save(new Product(551, "BOOK", 800.0, "XYZ"));
		repo.save(new Product(552, "BAT", 250.0, "NIT"));
		repo.save(new Product(553, "LAP", 1600.0, "TEST"));
		
		repo.save(new Product(554, "BOX", 210.0, "NIT"));
		repo.save(new Product(555, "MOBIL", 5800.0, "TEST"));
		repo.save(new Product(556, "MOUSE", 260.0, "NIT"));
		repo.save(new Product(557, "KEYBRD", 500.0, "XYZ"));
		
	}

}

5. Test Sorting Runner
package in.nareshit.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;

@Component
public class ProductDataSortRunner implements CommandLineRunner {

	@Autowired
	private ProductRepository repo;

	public void run(String... args) throws Exception {
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ***/
		/*
		//a. create Sort(C) object
		Sort s1 = Sort.by("vendor");

		//call findAll method with Sort object
		Iterable<Product> list = repo.findAll(s1);

		//print (JDK 5-forEach)
		for(Product p:list) {
			System.out.println(p);
		}
		 */
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR DESC ***/
		/*Sort s2 = Sort.by(Direction.DESC, "vendor");
		Iterable<Product> list = repo.findAll(s2);
		for(Product p:list) {
			System.out.println(p);
		}*/

		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ,PCOST ASC ***/
		/*Sort s3 = Sort.by("vendor","pcost"); // ASC
		Iterable<Product> list = repo.findAll(s3);

		for(Product p:list) {
			System.out.println(p);
		}*/
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR DESC ,PCOST DESC ***/
		/*Sort s4 = Sort.by(Direction.DESC, "vendor","pcost"); //DESC
		Iterable<Product> list = repo.findAll(s4);

		for(Product p:list) {
			System.out.println(p);
		}*/
		/*** SELECT * FROM  PRODUCT ORDER BY VENDOR ASC ,PCOST DESC ***/
		Sort s5 = Sort.by(Order.asc("vendor"),Order.desc("pcost"));
		Iterable<Product> list = repo.findAll(s5);

		for(Product p:list) {
			System.out.println(p);
		}
		
	}

}
==========================================================================

